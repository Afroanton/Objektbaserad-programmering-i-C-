// Labb1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm> 

using namespace std;




struct address
{
	string street;
	string city;
	int zip;
};
struct Person
{
	string name;
	string id;
	address location;
	
};
istream& operator>>(istream& in, Person& p)
{
	string zip1;
	string zip2;
	string zip3;
	string a;
	string city;
	char tecken = ',';
	string mellanrum = "    ";

	getline(in, p.name);
	transform(p.name.begin(), p.name.end(), p.name.begin(), ::toupper);
	getline(in, p.id);
	getline(in, p.location.street, tecken);
	in >> zip1;
	in >> zip2;
	zip3 = zip1 + zip2;
	int zip = stoi(zip3);
	p.location.zip = zip;
	getline(in, a);
	
	size_t pos = a.find(mellanrum);
	p.location.city = a.substr(2, pos-2);



	return in;
};

vector<Person> read_file(string namefile);
size_t find_in_names(vector<Person> vector_person, string name_part);
vector <Person> find_person_from_city(vector<Person>haystack, string city);



int main()
{
	
	
	vector<Person> vector_city;
	string val;
	string name_part = "dfsd";
	string city;
	string namefile = "Text.txt";
	size_t word_count;
	vector<Person> vector_person = read_file(namefile);
	vector<Person>vector_person_city;
	
	while (2 == 1 + 1)
	{
		cout << "[1]Sök del av personnam" << endl;
		cout << "[2]Sök städer" << endl;
		cout << "[3]Avsluta" << endl;
		getline(cin, val);
		if (val == "1")
		{
			cout << "sök person: ";
			getline(cin, name_part);
			
			word_count = find_in_names(vector_person, name_part);
			cout << word_count << endl;
		}
		if (val == "2")
		{
			cout << "sök stad: ";
			getline(cin, city);
			vector_person_city = find_person_from_city(vector_person, city);
			for (int j = 0; j < vector_person_city.size(); j++)
			{
				cout << vector_person_city[j].name << "," << vector_person_city[j].location.city << endl;
			}
		}
		if (val == "3")
		{
			return 0;
		}
		else
		{
			cout << "Ogiltigt alternativ" << endl;
		}
	}
	

}

	

vector<Person> read_file(string namefile)
{
	ifstream filename(namefile);
	vector<Person> vector_person;
	Person person;
	
	while (filename.peek() != EOF)
	{
		filename >> person;
		
		vector_person.push_back(person);
	}
	return vector_person;
		
}


size_t find_in_names(vector<Person> vector_person, string name_part)
{
	transform(name_part.begin(), name_part.end(), name_part.begin(), ::toupper);
	int counter = 0;
	
	for (int i = 0; i < vector_person.size(); i++)
	{
		 
		 size_t found = vector_person[i].name.find(name_part);
		 if (found != string::npos)
		 {
			 
			 counter++;
		 }
		

	}
	
	
	return counter;
}


vector<Person>find_person_from_city(vector<Person>haystack, string city)
{

	vector<Person>vector_person_city;
	transform(city.begin(), city.end(), city.begin(), ::toupper);

	for (int j = 0; j < haystack.size(); j++)
	{
		if (haystack[j].location.city == city)
		{
			
			vector_person_city.push_back(haystack[j]);
			
		}


	}
	return vector_person_city;
}
